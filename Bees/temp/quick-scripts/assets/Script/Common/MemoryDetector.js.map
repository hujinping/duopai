{"version":3,"sources":["MemoryDetector.ts"],"names":[],"mappings":";;;;;AACM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAE1C;IAAA;IA6DA,CAAC;uBA7DY,cAAc;IAIT,+BAAgB,GAA9B;QACI,IAAI,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE;YACjB,OAAO;SACV;QAED,IAAI,gBAAc,CAAC,OAAO,EAAE;YACxB,OAAO;SACV;QAED,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,QAAQ,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;QAC9B,uBAAuB;QAEvB,IAAI,cAAc,GAAG;YACjB,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1C,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC/C,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;YAErC,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;YAC5B,KAAK,CAAC,KAAK,GAAG,kBAAkB,CAAC;YACjC,KAAK,CAAC,IAAI,GAAG,4BAA4B,CAAC;YAC1C,KAAK,CAAC,UAAU,GAAG,OAAO,CAAC;YAC3B,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;YACrB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACzC,CAAC,CAAA;QAED,mBAAmB;QAEnB,IAAI,UAAU,GAAG;YACb,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAE9C,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;gBACxB,IAAI,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;gBACjC,KAAK,EAAE,CAAC;gBACR,UAAU,IAAI,UAAU,CAAC,aAAa,EAAE,GAAG,UAAU,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;aAC9E;YAED,IAAI,qBAAqB,GAAG,EAAE,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;YAEnE,KAAK,IAAI,GAAG,IAAI,qBAAqB,EAAE;gBACnC,IAAI,kBAAkB,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;gBACpD,KAAK,IAAI,YAAY,IAAI,kBAAkB,EAAE;oBACzC,IAAI,SAAS,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAC;oBACjD,KAAK,EAAE,CAAC;oBACR,UAAU,IAAI,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;iBACxD;aACJ;YAED,0FAA0F;YAC1F,OAAO,CAAC,GAAG,CAAC,oCAAoC,EAAC,CAAC,UAAU,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAC,GAAG,CAAC,CAAC;QACtG,CAAC,CAAA;QAED,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;QAC1D,gBAAc,CAAC,OAAO,GAAG,IAAI,CAAC;IAClC,CAAC;IA1De,sBAAO,GAAa,KAAK,CAAC;IAFjC,cAAc;QAD1B,OAAO;OACK,cAAc,CA6D1B;IAAD,qBAAC;;CA7DD,AA6DC,IAAA;AA7DY,wCAAc","file":"","sourceRoot":"../../../../../assets/Script/Common","sourcesContent":["\nconst {ccclass, property} = cc._decorator;\n@ccclass\nexport class MemoryDetector {\n\n    private  static _inited : boolean = false;\n\n    public static showMemoryStatus() : void  {\n        if (cc.sys.isNative) {\n            return;\n        }\n\n        if (MemoryDetector._inited) {\n            return;\n        }\n\n        let _memLabel = null;\n        let profiler = cc[\"profiler\"];\n        //profiler.showStats();\n\n        let createMemLabel = function () {\n            _memLabel = document.createElement('div');\n            profiler._fps = document.getElementById('fps');\n            profiler._fps.style.height = '100px';\n\n            let style = _memLabel.style;\n            style.color = 'rgb(0, 255, 255)';\n            style.font = 'bold 12px Helvetica, Arial';\n            style.lineHeight = '20px;';\n            style.width = '100%';\n            profiler._fps.appendChild(_memLabel);\n        }\n\n        //createMemLabel();\n\n        let afterVisit = function () {\n            let count = 0;\n            let totalBytes = 0;\n            let locTexrues = cc.textureCache[\"_textures\"];\n\n            for (let key in locTexrues) {\n                let selTexture = locTexrues[key];\n                count++;\n                totalBytes += selTexture.getPixelWidth() * selTexture.getPixelHeight() * 4;\n            }\n\n            let locTextureColorsCache = cc.textureCache[\"_textureColorsCache\"];\n\n            for (let key in locTextureColorsCache) {\n                let selCanvasColorsArr = locTextureColorsCache[key];\n                for (let selCanvasKey in selCanvasColorsArr) {\n                    let selCanvas = selCanvasColorsArr[selCanvasKey];\n                    count++;\n                    totalBytes += selCanvas.width * selCanvas.height * 4;\n                }\n            }\n            \n            //_memLabel.innerHTML = \"  Memory  \" + (totalBytes / (1024.0 * 1024.0)).toFixed(2) + \" M\";\n            console.log(\"log-----------------------memory=:\",(totalBytes / (1024.0 * 1024.0)).toFixed(2)+\"M\");\n        }\n\n        cc.director.on(cc.Director.EVENT_AFTER_VISIT, afterVisit);\n        MemoryDetector._inited = true;\n    }\n}\n"]}