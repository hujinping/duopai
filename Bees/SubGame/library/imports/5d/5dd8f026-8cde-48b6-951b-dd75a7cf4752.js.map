{"version":3,"sources":["..\\..\\..\\..\\assets\\Script/assets\\Script\\CanvasCtr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["import Ranking from \"./Ranking\";\r\nimport RankingCell from \"./RankingCell\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nenum Message_Type {\r\n    Get_SelfData,                       //获取自己信息\r\n    Get_FriendData,                     //获取好友排行榜数据\r\n    Get_GroupData,                      //获取群排名\r\n    Submit_SelfScore,                   //提交自己得分\r\n    Compare_Score,                      //比较自己与好友得分\r\n    Show_WholeRanking,                  //显示完整排行榜   \r\n    Show_OverRanking,                   //显示结束排行榜\r\n    Close_WholeRanking,                 //关闭好友排行\r\n    Close_OverRanking,                  //关闭结束排行\r\n};\r\n\r\n@ccclass\r\nexport default class CanvasCtr extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    ndFriend: cc.Node = null;\r\n    @property(Ranking)\r\n    scrRanking: Ranking = null;\r\n    @property(cc.Node)\r\n    ndSelf: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    ndOverRanking: cc.Node = null;\r\n    @property(Ranking)\r\n    EndScrRanking: Ranking = null;\r\n    @property(cc.Node)\r\n    ndOverSelf: cc.Node = null;\r\n\r\n    private mCanvas: cc.Canvas;\r\n    private mFriendRankData;\r\n    private mGroupData;\r\n    private mSelfData = null;\r\n    private mSelfRank = null;\r\n\r\n    onLoad() {\r\n        this.handleWxMessage();\r\n    }\r\n\r\n    handleWxMessage() {\r\n        if (window.wx != undefined) {\r\n            window.wx.onMessage(data => {\r\n                if (data.messageType == Message_Type.Get_FriendData) {              //获取好友排行榜数据\r\n                    this.getFriendData(data.LIST_KEY);\r\n                } else if (data.messageType == Message_Type.Get_GroupData) {        //获取群排名\r\n                    this.getGroupData(data.LIST_KEY, data.shareTicket)\r\n                } else if (data.messageType == Message_Type.Submit_SelfScore) {     //提交得分\r\n                    this.submitScore(data.score, data.LIST_KEY);\r\n                } else if (data.messageType == Message_Type.Compare_Score) {        //比较自己与好友得分\r\n                    this.compareWithScore(data.score);\r\n                } else if (data.messageType == Message_Type.Show_WholeRanking) {     //显示完整排行榜\r\n                    this.showFriendRanking();\r\n                } else if (data.messageType == Message_Type.Show_OverRanking) {      //显示结束排行榜\r\n                    this.showOverRanking();\r\n                } else if (data.messageType == Message_Type.Get_SelfData) {          //获取自己信息\r\n                    this.getSelfData();\r\n                } else if (data.messageType == Message_Type.Close_WholeRanking) {    //关闭完整排行\r\n                    this.closeFriendRanking();\r\n                } else if (data.messageType = Message_Type.Close_OverRanking) {      //关闭结束排行\r\n                    this.closeOverRanking();\r\n                }\r\n            });\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n\r\n    }\r\n\r\n    getSelfData() {\r\n        console.log(\"获取自己信息！！！！！！！！！！！！！\");\r\n        if (window.wx != undefined) {\r\n            window.wx.getUserInfo({\r\n                openIdList: ['selfOpenId'],\r\n                success: (userRes) => {\r\n                    console.log(\"获取自己信息成功！！！！！！！！！！！！！\", userRes);\r\n                    let userData = userRes.data[0];\r\n                    this.mSelfData = userData;\r\n                },\r\n                fail: (res) => {\r\n                    console.log(\"获取自己信息失败！！！！！！！！！！！！！\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getFriendData(LIST_KEY, showOver = false) {\r\n        console.log(\"获取好友排行榜数据！！！！！！！！！！！！！\");\r\n        if (window.wx != undefined) {\r\n            window.wx.getFriendCloudStorage({\r\n                keyList: [LIST_KEY],\r\n                success: (res) => {\r\n                    console.log(\"获取好友排行榜数据成功\");\r\n                    console.log(\"wx.getFriendCloudStorage success\", res);\r\n                    let data = res.data;\r\n                    data.sort((a, b) => {\r\n                        if (a.KVDataList.length == 0 && b.KVDataList.length == 0) {\r\n                            return 0;\r\n                        }\r\n                        if (a.KVDataList.length == 0) {\r\n                            return 1;\r\n                        }\r\n                        if (b.KVDataList.length == 0) {\r\n                            return -1;\r\n                        }\r\n                        return b.KVDataList[0].value - a.KVDataList[0].value;\r\n                    });\r\n                    this.mFriendRankData = data;\r\n                    this.mSelfRank = this.getSelfRank();\r\n                    if (showOver) {\r\n                        this.showOverRanking();\r\n                    } else {\r\n                        this.getSelfRank();\r\n                    }\r\n                },\r\n                fail: res => {\r\n                    console.log(\"获取好友排行榜数据失败\");\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    getGroupData(LIST_KEY, shareTicket) {\r\n        if (window.wx != undefined) {\r\n            window.wx.getUserInfo({\r\n                openIdList: ['selfOpenId'],\r\n                success: (userRes) => {\r\n                    window.wx.getGroupCloudStorage({\r\n                        shareTicket: shareTicket,\r\n                        keyList: [LIST_KEY],\r\n                        success: (res) => {\r\n                            console.log(\"wx.getGroupCloudStorage success\", res);\r\n                            let data = res.data;\r\n                            data.sort((a, b) => {\r\n                                if (a.KVDataList.length == 0 && b.KVDataList.length == 0) {\r\n                                    return 0;\r\n                                }\r\n                                if (a.KVDataList.length == 0) {\r\n                                    return 1;\r\n                                }\r\n                                if (b.KVDataList.length == 0) {\r\n                                    return -1;\r\n                                }\r\n                                return b.KVDataList[0].value - a.KVDataList[0].value;\r\n                            });\r\n                            this.mGroupData = data;\r\n                            this.showGroupRanking();\r\n                        },\r\n                        fail: res => {\r\n                            console.log(\"wx.getFriendCloudStorage fail\", res);\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    submitScore(score, LIST_KEY) {\r\n        console.log('提交分数')\r\n        if (window.wx != undefined) {\r\n            window.wx.getUserCloudStorage({\r\n                // 以key/value形式存储\r\n                keyList: [LIST_KEY],\r\n                success: (getres) => {\r\n                    console.log('提交分数成功', getres)\r\n                    if (getres.KVDataList.length != 0) {\r\n                        if (getres.KVDataList[0].value > score) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    // 对用户托管数据进行写数据操作\r\n                    window.wx.setUserCloudStorage({\r\n                        KVDataList: [{\r\n                            key: LIST_KEY,\r\n                            value: \"\" + score\r\n                        }],\r\n                        success: (res) => {\r\n                            console.log('setUserCloudStorage', 'success', res)\r\n                        },\r\n                        fail: function (res) {\r\n                            console.log('setUserCloudStorage', 'fail')\r\n                        },\r\n                        complete: function (res) {\r\n                            console.log('setUserCloudStorage', 'ok')\r\n                        }\r\n                    });\r\n                },\r\n                fail: function (res) {\r\n                    console.log('提交分数失败', 'fail')\r\n                },\r\n                complete: (res) => {\r\n                    console.log('提交分数完成', 'ok')\r\n                    this.getFriendData(\"Rank_Data\", true);\r\n                }\r\n            });\r\n        } else {\r\n            cc.log(\"提交得分:\" + LIST_KEY + \" : \" + score)\r\n        }\r\n    }\r\n\r\n    compareWithScore(selfScore) {\r\n\r\n    }\r\n\r\n    showFriendRanking() {\r\n        this.ndOverRanking.active = false;\r\n        this.EndScrRanking.node.active = false;\r\n        this.ndFriend.active = true;\r\n        this.scrRanking.node.active = true;\r\n        console.log(\"显示好友排行榜\", this.mFriendRankData);\r\n        if (!this.mFriendRankData) {\r\n            console.log(\"没有好友排行榜信息，请先获取好友排行榜信息\");\r\n            return;\r\n        }\r\n        this.scrRanking.loadRanking(this.mFriendRankData);\r\n\r\n        console.log(\"显示自己信息：\", this.mSelfData);\r\n        if (!this.mSelfRank) {\r\n            this.mSelfRank = this.getSelfRank();\r\n        }\r\n        let selfRanking = this.ndSelf.getComponent(RankingCell);\r\n        selfRanking.setData(this.mSelfRank, this.mSelfData, false);\r\n    }\r\n\r\n    closeFriendRanking() {\r\n        this.scrRanking.clear();\r\n    }\r\n\r\n    showOverRanking() {\r\n        if (!this.mFriendRankData) {\r\n            console.log(\"没有好友排行榜信息，请先获取好友排行榜信息\");\r\n            return;\r\n        }\r\n        console.log(\"this.mFriendRankData =========\", this.mFriendRankData);\r\n        this.ndOverRanking.active = true;\r\n        this.EndScrRanking.node.active = true;\r\n        this.ndFriend.active = false;\r\n        this.scrRanking.node.active = false;\r\n\r\n        let selfRanking = this.ndOverSelf.getComponent(RankingCell);\r\n        selfRanking.setSelfOverData(this.mSelfData);\r\n\r\n        this.EndScrRanking.loadOverRanking(this.mFriendRankData);\r\n    }\r\n\r\n    closeOverRanking() {\r\n        this.EndScrRanking.clear();\r\n    }\r\n\r\n    getSelfRank() {\r\n        let rank = 0;\r\n        if (this.mSelfData) {\r\n            for (let i = 0; i < this.mFriendRankData.length; i++) {\r\n                let data = this.mFriendRankData[i];\r\n                if (data.avatarUrl == this.mSelfData.avatarUrl) {\r\n                    rank = i;\r\n                    this.mSelfData = data;\r\n                }\r\n            }\r\n        }\r\n        return rank;\r\n    }\r\n\r\n\r\n    showGroupRanking() {\r\n        if (!this.mGroupData) {\r\n            console.log(\"没有群好友排行榜信息，请先获取\");\r\n            return;\r\n        }\r\n        console.log(\"this.mGroupData =========\", this.mFriendRankData);\r\n        this.closeOverRanking();\r\n        this.EndScrRanking.loadOverRanking(this.mGroupData);\r\n    }\r\n\r\n    // start () {\r\n\r\n    // }\r\n\r\n    // update (dt) {}\r\n}\r\n"]}